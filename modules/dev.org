:PROPERTIES:
:GPTEL_MODEL: qwen3:30b
:GPTEL_BACKEND: Ollama
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: nil
:END:
#+STARTUP: showall

* Git

Use magit for git. The customization on =magit-display-buffer-function= makes it prompts =magit-status= in the same windows instead of opening a new one.

#+begin_src emacs-lisp
  (use-package magit
    ;; Defer loading magit until magit-status is called
    :commands magit-status
    :straight t
    :defer t
    :bind (("C-x g" . magit-status))
    :custom (magit-display-buffer-function
             #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Forge

This package [[https://magit.vc/manual/forge/][forge]] adds integration with Github and Gitlab etc.

*NOTE*: Make sure to configure a GitHub token before using this package!

1. https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
2. https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

#+begin_src emacs-lisp
  (use-package forge
    :straight t
    :defer t
    :after magit)
#+end_src

* Direnv

This makes Emacs respect =.envrc= file for direnv. I am mainly using =direnv= for automatically starting the =devShell= defined in =flake.nix=, and this makes it so that it brings in the commands enabled by the =devShell=.

#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :config (direnv-mode))
#+end_src


* Tree-sitter

This uses the built-in ~tree-sitter~, called ~treesit~. Before you can use a Tree‑sitter major mode, Emacs needs the compiled grammar .so (or .dylib/.dll). To install a grammar, run ~M-x treesit-install-language-grammar~. The available grammar urls are defined below.

#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((python "https://github.com/tree-sitter/tree-sitter-python")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          ;; Need the v0.23.3 because newer version will have ABI 15,
          ;; while currently the `treesit` in emacs requires the ABI 14
          ;; version.
          (rust "https://github.com/tree-sitter/tree-sitter-rust" "v0.23.3")
          (json   "https://github.com/tree-sitter/tree-sitter-json")
          (yaml   "https://github.com/ikatyang/tree-sitter-yaml")
          (nix    "https://github.com/nix-community/tree-sitter-nix")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master"
"typescript/src")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
          (cmake  "https://github.com/uyha/tree-sitter-cmake")))
#+end_src

* Eglot (LSP)

#+begin_src emacs-lisp
  (use-package eglot
    :hook ((python-ts-mode . eglot-ensure)
           (c++-ts-mode . eglot-ensure)
           (c-ts-mode . eglot-ensure)
           (rust-ts-mode . eglot-ensure)
           (gfm-mode . eglot-ensure))
    :custom
    '((rust-ts-mode . ("rust-analyzer"))
      (c-ts-mode . ("clangd" "--background-index"))
      (c++-ts-mode . ("clangd" "--background-index" "--compile-commands-dir=build"))))
#+end_src

* Corfu (Completion)

Also added ~cape~, because there are many cases when I want to completion with files or dynamic abbreviation expansion across all open buffers.

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :init (global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    :bind (:map corfu-map
                ("<tab>" . corfu-insert)
                ("TAB" . corfu-insert)))

  (use-package cape
    :straight t                             ;; Install CAPE too
    :after corfu                            ;; ensure Corfu is loaded first
    :init
    ;; Add CAPE’s backends to the global list of capfs.
    ;; Order matters: they’re tried in sequence, so put
    ;; cape-file and cape-dabbrev early for broad coverage.
    ;;
    ;; You can wrap multiple capfs into one super‑backend:
    ;; (add-to-list 'completion-at-point-functions
    ;;              (cape-capf-super #'cape-file #'cape-dabbrev))
    (add-to-list 'completion-at-point-functions #'cape-file)     ;; files & paths
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)  ;; dynamic abbrev
    (add-to-list 'completion-at-point-functions #'cape-keyword)) ;; language keywords
#+end_src

* C++

Re-map the traditional ~c++-mode~ to the new tree-sitter based ~c++-ts-mode~.

#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
               '(c++-mode . c++-ts-mode))   ;; use Tree‑sitter C++ mode
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-ts-mode))
#+end_src

Tell ~eglot~ where to find the =compile_commands.json=. It should by default live under the =build= directory. This requires enabling ~CMAKE_EXPORT_COMPILE_COMMANDS~ in the following way.

#+begin_src cmake
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
  if(CMAKE_EXPORT_COMPILE_COMMANDS)
    set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES
      ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES})
  endif()
#+end_src

Add key-bindings to proactively call =clang-format=.

#+begin_src emacs-lisp
  (defun bds/clang-format-buffer-and-back-to-indentation ()
    "Call clang-format to format the whole buffer, and move the
     cursor to the first non-space character of the current line."
    (interactive)
    (clang-format-buffer)
    (back-to-indentation))

  (use-package clang-format
    :straight t
    :after c++-ts-mode
    :bind (:map c++-ts-mode-map
                ("<tab>" . clang-format-region)
                ("<C-M-tab>" . bds/clang-format-buffer-and-back-to-indentation)))
#+end_src

* CMake

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-ts-mode))
  (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-ts-mode))
#+end_src

* Nix

#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src

* Python

#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
               '(python-mode . python-ts-mode))
#+end_src

* Common Lisp

#+begin_src emacs-lisp
  (use-package slime
    :straight t
    :defer t
    :config
    (setq inferior-lisp-program "quicklisp run")
    (slime-setup '(slime-fancy)))
#+end_src

* Rust

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
#+end_src

* LaTeX

Use ~auctex~ for =LaTeX= edit.

#+begin_src emacs-lisp
  (use-package tex :straight auctex :defer t)
#+end_src

* YAML

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-ts-mode))
#+end_src

* JSON

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
#+end_src

* XML

Default indentation is 2. Make it 4.

#+begin_src emacs-lisp
  (setq nxml-child-indent 4
        nxml-attribute-indent 4)
  (add-to-list 'auto-mode-alist '("\\.xml\\.tmpl\\'" . nxml-mode))
#+end_src

* Javascript and Typescript

JavaScript should enjoy its tree-sitter mode.

#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
               '(javascript-mode . javascript-ts-mode))
#+end_src

Associating ~.ts~ and ~.tsx~ with typescript ts mode.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src

* Markdown

We do need a better major mode for markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :defer t
    :init (setq markdown-command "pandoc")
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode))
    :hook ((gfm-mode . flyspell-mode)
           (gfm-mode . outline-minor-mode)))

  (with-eval-after-load 'markdown-mode
    (setq markdown-fontify-code-blocks-natively t)
    (setq markdown-code-lang-modes
          '(("python" . python-ts)
            ("py" . python-ts)
            ("json" . json-ts)
            ("nix" . nix-ts)
            ("c++" . c++-ts))))

  (with-eval-after-load 'gfm-mode
    (setq markdown-fontify-code-blocks-natively t)
    (setq markdown-code-lang-modes
          '(("python" . python-ts)
            ("py" . python-ts)
            ("json" . json-ts)
            ("nix" . nix-ts)
            ("c++" . c++-ts))))  
#+End_src
