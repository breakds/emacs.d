#+TITLE: Development Configuration for Emacs
#+STARTUP: showall

* Overall

Add visual guides towards indenting levels.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'highlight-indent-guides)
  (setq highlight-indent-guides-method 'character)
#+END_SRC

Use magit for git.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** ivy

Install ivy from git (the [[https://github.com/abo-abo/swiper][git repo]] is called swiper).

*TODO(breakds)*: When =ivy-mode= is enabled, I was no longer able to
do =load-file= of the =init.el=. It will prompt error message like
"wrong type argument: stringp, nil". Needs further investigation.

#+BEGIN_SRC emacs-lisp
  (straight-use-package '(counsel :type git
                                  :host github
                                  :repo "abo-abo/swiper"))
  (ivy-mode 1)
  (diminish 'ivy-mode)
  (setq ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        ivy-height 17)
  (global-set-key (kbd "C-s") 'swiper-isearch)
#+END_SRC

** Projectile

Notes:
1. This [[https://www.reddit.com/r/emacs/comments/azddce/what_workflows_do_you_have_with_projectile_and/][reddit post]] and [[https://www.reddit.com/r/emacs/comments/guzkwo/what_does_projectile_actually_do/][this]].
2. It can help you go between implementations file and its
   corresponding files, very suitable for java projects.
3. Projectile help scoping some of commands from other packages, such
   as lsp-mode and its siblings.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'projectile)
  (straight-use-package 'counsel-projectile)
  (projectile-mode +1)
  (diminish 'projectile-mode "PROJ")
  (counsel-projectile-mode)
#+END_SRC

Hydra map for projectile. Use "C-c p" to invoke it. This is copied
from rememberYou's configuration in [[https://www.reddit.com/r/emacs/comments/azddce/what_workflows_do_you_have_with_projectile_and/][this reddit post]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c p") 'hydra-projectile/body)
  (defhydra hydra-projectile (:color blue)
    "
    ^
    ^Projectile^        ^Buffers^           ^Find^              ^Search^
    ^──────────^────────^───────^───────────^────^──────────────^──────^────────────
    _q_ quit            _b_ list            _d_ directory       _r_ replace
    _i_ reset cache     _k_ kill all        _D_ root            _R_ regexp replace
    ^^                  _S_ save all        _f_ file            _s_ search
    ^^                  ^^                  _p_ project         ^^
    ^^                  ^^                  ^^                  ^^
    "
    ("q" nil)
    ("b" counsel-projectile-switch-to-buffer)
    ("d" counsel-projectile-find-dir)
    ("D" projectile-dired)
    ("f" counsel-projectile-find-file)
    ("i" projectile-invalidate-cache :color red)
    ("k" projectile-kill-buffers)
    ("p" counsel-projectile-switch-project)
    ("r" projectile-replace)
    ("R" projectile-replace-regexp)
    ("s" counsel-ag)
    ("S" projectile-save-project-buffers))
#+END_SRC

** Treemacs

A file and project explorer similar to Project Explorer in Eclipse.
Read the full [[https://github.com/Alexander-Miller/treemacs][readme]] on its GitHub site.

Treemacs has integration with projectile.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'treemacs)
  (straight-use-package 'treemacs-projectile)
  (with-eval-after-load 'treemacs
    (treemacs-git-mode 'deferred)
    ;; Do not show file that is git ignored.
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+END_SRC

** Linter: flycheck
To make extensions on top of flycheck, refer to [[https://www.flycheck.org/en/latest/developer/developing.html][Developer's Guide]]. You
can define a checker for your language.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

Hydra bindings for flycheck

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c f") 'hydra-flycheck/body)
  (defhydra hydra-flycheck (:color blue)
    "
    ^
    ^Flycheck^          ^Errors^            ^Checker^
    ^────────^──────────^──────^────────────^───────^─────
    _q_ quit            _<_ previous        _?_ describe
    _M_ manual          _>_ next            _d_ disable
    _v_ verify setup    _f_ check           _m_ mode
    ^^                  _l_ list            _s_ select
    ^^                  ^^                  ^^
    "
    ("q" nil)
    ("<" flycheck-previous-error :color pink)
    (">" flycheck-next-error :color pink)
    ("?" flycheck-describe-checker)
    ("M" flycheck-manual)
    ("d" flycheck-disable-checker)
    ("f" flycheck-buffer)
    ("l" flycheck-list-errors)
    ("m" flycheck-mode)
    ("s" flycheck-select-checker)
    ("v" flycheck-verify-setup))
#+END_SRC

** Auto Completion: company-mode

The package company mode uses *pluggable* backends and frontends for
completion candidates.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company)
  (with-eval-after-load 'company-mode
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't))
  (global-company-mode t)
#+END_SRC

Also, add =company-box= to add icons to company frontends. Note that
the default icons are too big currently. Therefore it is recommended
to use ='company-box-icons-idea= or ='company-box-icons-all-the-icons=
instead.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company-box)
  (add-hook 'company-mode-hook 'company-box-mode)
  (setq company-box-icons-alist 'company-box-icons-idea)
  (with-eval-after-load 'company-box-mode
    (setq company-box-enable-icon centaur-icon
          company-box-backends-colors nil
          company-box-highlight-prefix t))
#+END_SRC

* LSP (Language Server Protocol) to Rule Them All

Use [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] as the client for various lsp servers. The following
configuration is mostly guided by [[https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs][official installation instructions]].

The =dap-mode= is used for integrated debugger experience.

#+BEGIN_SRC emacs-lisp
  (setq lsp-key-prefix "C-c l")
  (straight-use-package 'lsp-mode)
  (setq lsp-enable-snippet nil
        lsp-prefer-flymake nil
        lsp-restart 'auto-restart
        lsp-completion-enable-additional-text-edit nil)
  (straight-use-package 'lsp-ui)
  (straight-use-package 'lsp-ivy)
  (straight-use-package 'lsp-treemacs)
  (straight-use-package 'dap-mode)
  (dap-mode t)
  (dap-ui-mode t)
  (dap-ui-controls-mode t)  ;; requires Emacs 26+
#+END_SRC

The compilation and test output are in some buffer derived from the
=compilation mode=, which includes ansi color. Need to let them
display the color properly.

#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC


* C/C++
** General C/C++ Specific Configuration
Please treat .h as C++ code!

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

And respect C++11, C++14, C++17, C++20
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'modern-cpp-font-lock)
  (modern-c++-font-lock-global-mode t)
#+END_SRC

** Clang Format

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'clang-format)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun clang-format-buffer-and-back-to-indentation ()
    "Call clang-format to format the whole buffer, and move the
    cursor to the first non-space character of the current line."
      (interactive)
      (clang-format-buffer)
      (back-to-indentation))

  (defun clang-format-bindings ()
    "Hijack the tab key to perform the function defined above,
    which is `clang-format-buffer-and-back-to-indentation`."
    (define-key c++-mode-map [tab] 'clang-format-region)
    (define-key c++-mode-map [C-M-tab] 'clang-format-buffer-and-back-to-indentation))

  (add-hook 'c++-mode-hook 'clang-format-bindings)
#+END_SRC


* Python

** Visualize Indentation Level
   
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'highlight-indent-guides-mode)
#+END_SRC

* Java
** Standard Java

Add hooks for =lsp-mode=. This means that the hoo

#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook 'lsp-deferred)
  (straight-use-package 'lsp-java)  ;; LSP backend Java
  (require 'dap-java)
#+END_SRC

** Android

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'android-mode)
  (add-hook 'android-mode-hook 'lsp-deferred)
#+END_SRC

** Gradle

*TODO*: Create a hydra map for gradle mode

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'gradle-mode)
  (add-to-list 'auto-mode-alist '("\\.gradle$" . gradle-mode))
#+END_SRC

** Key Map for Java

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-java (:color blue)
    "
    ^
    ^Browse^                    ^Testing^                     ^Edit^                    ^Server^
    ^──────^────────────────────^───────^─────────────────────^────^────────────────────^──────^────────────
    [_d_] Definition            [_x_] Run test method         [_f_] Format buffer       [_M-s_] Describe Session
    [_R_] References            [_X_] Run test class          [_F_] Organize imports    ^^
    [_i_] Implementation        ^^                            [_S_] Add toString()      ^^
    [_t_] Type Definiton        ^^                            ^^                        ^^
    [_l_] Highlight Related     ^^                            ^^                        ^^
    "
    ("q" nil)

    ("d" lsp-ui-peek-find-definitions)
    ("R" lsp-ui-peek-find-references)
    ("i" lsp-ui-peek-find-implementation)
    ("t" lsp-find-type-definition)
    ("l" lsp-symbol-highlight)

    ("x" dap-java-run-test-method)
    ("X" dap-java-run-test-class)

    ("f" lsp-format-buffer)
    ("F" lsp-java-organize-imports)
    ("S" lsp-java-generate-to-string)

    ("M-s" lsp-describe-session))
  (define-key java-mode-map (kbd "C-c C-j") 'hydra-java/body)
#+END_SRC

Other *really* shortcuts defined below.

#+BEGIN_SRC emacs-lisp
  (define-key java-mode-map (kbd "C-.") 'lsp-ui-peek-find-implementation)
#+END_SRC

* Bazel

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.BUILD" . python-mode))
  (add-to-list 'auto-mode-alist '("\\.bzl" . python-mode))
  (add-to-list 'auto-mode-alist '("BUILD" . python-mode))
  (add-to-list 'auto-mode-alist '("WORKSPACE" . python-mode))
#+END_SRC

* Protocol Buffer

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'protobuf-mode)
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'rust-mode)
#+END_SRC

* Common Lisp

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'slime)
  ;; Use this instead of sbcl because in NixOS quicklisp wraps sbcl.
  (setq inferior-lisp-program "quicklisp run")
  (slime-setup '(slime-fancy))
#+END_SRC

* AucTeX

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'auctex)
#+END_SRC

* Javascript and Typescript

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx$" . web-mode))
#+END_SRC

* Nix 

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'nix-mode)
#+END_SRC

* CMake

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'cmake-mode)
  (setq cmake-tab-width 4)
#+END_SRC

* Ledger

*TODO*: Add a hydra map for ledger mode.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'ledger-mode)
  (add-to-list 'auto-mode-alist '("\\.journal$" . ledger-mode))
#+END_SRC
