#+STARTUP: showall

* Git

Use magit for git. The customization on =magit-display-buffer-function= makes it prompts =magit-status= in the same windows instead of opening a new one.

#+begin_src emacs-lisp
  (use-package magit
    ;; Defer loading magit until magit-status is called
    :commands magit-status
    :straight t
    :defer t
    :bind (("C-x g" . magit-status))
    :custom (magit-display-buffer-function
             #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Forge

This package [[https://magit.vc/manual/forge/][forge]] adds integration with Github and Gitlab etc.

*NOTE*: Make sure to configure a GitHub token before using this package!

1. https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
2. https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

#+begin_src emacs-lisp
  (use-package forge
    :straight t
    :defer t
    :after magit)
#+end_src

* Direnv

This makes Emacs respect =.envrc= file for direnv. I am mainly using =direnv= for automatically starting the =devShell= defined in =flake.nix=, and this makes it so that it brings in the commands enabled by the =devShell=.

#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :config (direnv-mode))
#+end_src


* Tree-sitter

This uses the built-in ~tree-sitter~, called ~treesit~. Before you can use a Tree‑sitter major mode, Emacs needs the compiled grammar .so (or .dylib/.dll). To install a grammar, run ~M-x treesit-install-language-grammar~. The available grammar urls are defined below.

#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((python "https://github.com/tree-sitter/tree-sitter-python")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (rust "https://github.com/tree-sitter/tree-sitter-rust")
          (json   "https://github.com/tree-sitter/tree-sitter-json")
          (yaml   "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

* Eglot (LSP)

#+begin_src emacs-lisp
  (use-package eglot
    :hook ((python-ts-mode . eglot-ensure)
           (c++-ts-mode . eglot-ensure)
           (c-ts-mode . eglot-ensure))
    :custom
    '((c-ts-mode . ("clangd" "--background-index"))
      (c++-ts-mode . ("clangd" "--background-index"))))
#+end_src

* Corfu (Completion)

Also added ~cape~, because there are many cases when I want to completion with files or dynamic abbreviation expansion across all open buffers.

#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :init (global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    :bind (:map corfu-map
                ("<tab>" . corfu-insert)
                ("TAB" . corfu-insert)))

  (use-package cape
    :straight t                             ;; Install CAPE too
    :after corfu                            ;; ensure Corfu is loaded first
    :init
    ;; Add CAPE’s backends to the global list of capfs.
    ;; Order matters: they’re tried in sequence, so put
    ;; cape-file and cape-dabbrev early for broad coverage.
    ;;
    ;; You can wrap multiple capfs into one super‑backend:
    ;; (add-to-list 'completion-at-point-functions
    ;;              (cape-capf-super #'cape-file #'cape-dabbrev))
    (add-to-list 'completion-at-point-functions #'cape-file)     ;; files & paths
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)  ;; dynamic abbrev
    (add-to-list 'completion-at-point-functions #'cape-keyword)) ;; language keywords
#+end_src

* C++

#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
               '(c++-mode . c++-ts-mode))   ;; use Tree‑sitter C++ mode
#+end_src

* CMake

#+begin_src emacs-lisp
  (use-package cmake-mode
    :straight t
    :defer t
    :config (setq cmake-tab-width 4))
#+end_src

* Nix

#+begin_src emacs-lisp
  (use-package nix-mode :straight t :defer t)
#+end_src


* Python

#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
               '(python-mode . python-ts-mode))
#+end_src

* LaTeX

Use ~auctex~ for =LaTeX= edit.

#+begin_src emacs-lisp
  (use-package tex :straight auctex :defer t)
#+end_src

* YAML

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-ts-mode))
#+end_src

* JSON

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json\\'" . json-ts-mode))
#+end_src
