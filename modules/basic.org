#+TITLE: Basic Configurations for Emacs
#+STARTUP: showall

* Key Bindings

| Bindings    | Description                  |
|-------------+------------------------------|
| C-x <Right> | Cycle to next window         |
| C-x <Left>  | Cycle to prev window         |
| C-x u       | Invoke Undo Tree             |
| M-p         | Remove trailing whitespaces  |

The Emacs key bindings are documented [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html][here]]. Some especially useful
quotes:

#+BEGIN_QUOTE
You can also use define-key, a more general function; then you must explicitly specify the map to change.

The syntax =\C-= means that the following character is a control
character and =\M-= means that the following character is a meta
character. Thus, the string =\M-x= is read as containing a single
=M-x=, =\C-f= is read as containing a single =C-f=, and =\M-\C-x= and
=\C-\M-x= are both read as containing a single =C-M-x=.

The =kbd= function is a convenient way to specify the key sequence.
#+END_QUOTE

And a keymap is basically a tree-structured map, with all the leaves
being the functions to call. One could also use =global-set-key=,
which is [[https://stackoverflow.com/questions/906368/what-is-the-difference-between-global-set-key-and-define-key-global-map-in-e#:~:text=2%20Answers&text=Function%20global%2Dset%2Dkey%20is,it%20only%20wraps%20define%2Dkey%20.][defined more or less like]] =(define-key (current-global-map) key command))=.

** Hydra

With the above being said, it is better to use hydra to combine all
the basic operations with "C-c b".

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t
    :defer t)

  (global-set-key (kbd "C-c b") 'hydra-base-map/body)
#+END_SRC


The basic map for most frequently used key bindings.

#+begin_src emacs-lisp
  (defun bds/revert-buffer-noconfirm ()
    "Call `revert-buffer` without prompting for yes/no"
    (interactive)
    (revert-buffer nil t))
#+end_src

#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (defhydra hydra-base-map (:color amaranth)
    "
    Break's Frequently Used Keys
    ^
    ^Fast^              ^Mode^
    ^──────────^────────^───────^──────
    _r_ recent files    _u_ undo tree
    _g_ ag              _t_ treemacs
    _b_ revert buffer
    _x_ boxed text
    ─────────────────────────────────────
    ^[_q_]: quit
    "
    ("q" nil)
    ("r" consult-recent-file :exit t)
    ("t" treemacs :exit t)
    ("g" consult-ripgrep :exit t)
    ("u" undo-tree-visualize :exit t)
    ("b" bds/revert-buffer-noconfirm :exit t)
    ("x" bds/boxed-text :exit t))
#+END_SRC

Being able to zoom in and out is useful

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+END_SRC

* Custom File

Put the custom file in a separate file so that it does not touch
init.el. Only load it when it exists.

#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Unclassified General Configurations

#+BEGIN_SRC emacs-lisp
  (setq-default
   indent-tabs-mode nil ; Do not use tab for indentation.
   scroll-conservatively most-positive-fixnum ; Auto-scroll 1 line every time.
   scroll-margin 5 ; Auto scroll when you are within 5-lines of the vertical screen boundary.
   sentence-end-double-space nil ; Use one space (instead of two) to
                                 ; mark end of sentence.
   tab-width 8
   x-stretch-cursor t)
#+END_SRC

Replace =yes/no= prompts with =y/n=.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use uft-8 encoding by default.
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
#+END_SRC

A larger kill ring

#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 5000)
#+END_SRC

Delete trailing whitespaces.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'delete-trailing-whitespace)
#+END_SRC

Insert the current date function.

#+BEGIN_SRC emacs-lisp
(defun bds/insert-current-datetime ()
  (interactive)
  (insert (format-time-string "<%Y-%m-%d %a>")))
#+END_SRC

Batch kill buffers.

#+BEGIN_SRC emacs-lisp
(defun bds/gc-buffers (path-pattern)
  "Kill all the buffers whose file name path matches the input pattern."
  (interactive "sEnter the path pattern: ")
  (loop for buf in (buffer-list)
        for path = (buffer-file-name buf)
        when (and path
                  (string-match-p path-pattern path))
        do (kill-buffer buf)))
#+END_SRC

Measure the start up time

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs fully started up in %s with %d garbage collections."
                       ;; Time elapsed
                       (format "%.2f seconds" (float-time (time-subtract after-init-time
                                                                         before-init-time)))
                       gcs-done)))
#+end_src

Create a boxed text, useful when creating comments and documentation.

#+begin_src emacs-lisp
  (defun bds/boxed-text (text)
    "Add a box around the input text"
    (interactive "sEnter text: ")
    (let* ((len (length text))
           (line1 (concat "┌" (make-string (+ len 2) ?─) "┐"))
           (line2 (concat "│ " text " │"))
           (line3 (concat "└" (make-string (+ len 2) ?─) "┘")))
      (insert (concat line1 "\n" line2 "\n" line3 "\n"))))
#+end_src

#+RESULTS:
: bds/boxed-text

* Browser

Choose one of the browsers, with the priority in order.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-generic-program
        (or (locate-file "google-chrome" exec-path)
            (locate-file "google-chrome-stable" exec-path)
            (locate-file "firefox" exec-path)))
  (setq browse-url-browser-function 'browse-url-generic)
#+END_SRC

* Backup File Configuration
Save a lot.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups/"
                                                           user-emacs-directory)))
        delete-old-versions -1
        version-control t
        vc-make-backup-files t
        ;; Sadly I cannot move the lock files so that I will have to disable them.
        ;; https://www.emacswiki.org/emacs/LockFiles
        ;;
        ;; Otherwise, the webpack hot reloading just keep dying. I think
        ;; the other way around is to fix webpack hot reloading, but chose not to.
        create-lockfiles nil
        auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save-list/"
                                                                  user-emacs-directory) t)))
#+END_SRC

* Garbage Collection

Run gc upon focus-out. Emacs should feel snappier.

#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

* Scrolling

#+begin_src emacs-lisp
  (when (fboundp 'pixel-scroll-prevision-mode)
    (pixel-scroll-prevision-mode 1))
#+end_src

By default, Emacs coalesces multiple wheel events into a single line‑scroll event, which conflicts with the fine granularity of precision scrolling. To disable this and ensure each pixel‑scroll event is honored:

#+begin_src emacs-lisp
  (setq mwheel-coalesce-scroll-events nil)
#+end_src

* Undo

Use =undo-tree-mode= to visualize the undo/redo history, and to
navigate/jump between them.

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)
    ;; I think it is probably better to handle long term change history
    ;; with git manually.
    (setq undo-tree-auto-save-history nil))
#+end_src
