#+TITLE: Org Tweaks
#+AUTHOR: Break Yang
#+STARTUP: showall

* Overall and Appearance

The preset is applied when entering org-mode buffer so that

1. Display children with indentation level. Note that the indentation is only *cosmetic*.
2. Automatically wraps the lines that goes over the boundaries.
3. By default =visual-line-mode= will only wrap at the boundary of the screen, which might leave the line to be too line when the buffer and the screen is super wide. We use =visual-fill-column-mode= (provided by the [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] package) to achieve that.

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :straight t)

  (defun bds/org-mode-preset ()
    (org-indent-mode 1)
    (visual-line-mode 1)
    (visual-fill-column-mode 1)
    (setq visual-fill-column-width 100)
    ;; Hiding emphasis markers will hide the markers for
    ;; *bold* ~code~ =verbatim= so that they appear more readable
    (setq org-hide-emphasis-markers t)
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch)))

  (use-package org
    :hook (org-mode . bds/org-mode-preset)
    :config
    (setq org-ellipsis " ▾")
    (setq org-log-into-drawer t)
    ;; The default font size for latex preview is too small
    (plist-put org-format-latex-options :scale 1.5))
#+end_src

** Easy Template Expansion

Easy template expansion is about for example typing =<s= and have it exapanded to =#+begin_src= when TAB is hit. It is provided by =org-tempo=.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)
    ;; <cc -> #+begin_src c++
    (add-to-list 'org-structure-template-alist '("cc" . "src c++"))
    ;; <sh -> #+begin_src shell
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    ;; <el -> #+begin_src emacs-lisp
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    ;; <py -> #+begin_src python
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Bullets in Org Mode

For visually better-looking org files in Emacs, we use [[https://github.com/integral-dw/org-bullets][org-bullets]]. We customized the bullets here just to make them look more consistent.


#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC

** Cutomized Label And Tags

Defines the TODO keywords andthe tag list.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-todo-keywords
          '((sequence "TODO(t)" "ONGOING(g)" "PAUSE(p)" "|"
                      "DONE(d)" "DELEGATED(l)" "CANCELLED(c@)")))
    (setq org-todo-keyword-faces
          '(("ONGOING" . (:foreground "blue" :weight bold))
            ("PAUSE" . (:foreground "red" :weight bold))
            ("DELEGATED" . (:foreground "orange" :weight bold))))
    (setq org-tag-alist '((:startgroup . nil)
                          ("@work" . ?w)
                          ("@home" . ?h)
                          (:endgroup . nil)
                          ("FAVORITE" . ?f))))
#+END_SRC

** Key Bindings

| Bindings | Description                                       |
|----------+---------------------------------------------------|
| C-c a    | Org Agenda                                        |
| C-c o    | Main organizer file                               |
| C-c c    | Capture                                           |
| C-c '    | Create a new buffer to edit the source code block |
| C-c C-j  | Goto mode                                         |
| <F6>     | Yank the URL in the clipboard                     |

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c o") (lambda ()
                                  (interactive)
                                  (find-file "~/org/buffers.org")))
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Use =<F6>= to paste a link in the kill ring (i.e. paste bin). By default it will just use ="here"= as the title for the link, unless we put more logic in =bds/org/deduce-link-text=.

#+BEGIN_SRC emacs-lisp
  (defun bds/org/deduce-link-text (link)
      ;; TODO(breakds): Implement the actual logic here
      "here")
  (defun bds/org/yank-link ()
    (interactive)
    (let* ((link (current-kill 0))  ;; Get the front of the kill ring
           (text (bds/org/deduce-link-text link)))
      (insert "[[")
      (yank)
      (insert "][")
      (insert text)
      (insert "]]")))
  (define-key org-mode-map (kbd "<f6>") 'bds/org/yank-link)
#+END_SRC

* Org Agenda

*TODO*: Make a better configuration for navigating and operating the agenda mode.

#+begin_src emacs-lisp
  (setq org-agenda-span 10)
  (setq org-agenda-start-on-weekday 0)
#+end_src

As long as org agenda buffer is open, save one org buffer will save all org buffers.

#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'org-save-all-org-buffers)))
#+end_src

When displaying agenda, find tasks from the following files.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (cl-remove-if-not #'file-exists-p
                          (list "~/org/personal.org"
                                "~/org/buffers.org"
                                "~/org/work/gail.org"
                                "~/org/work/wonderland.org")))
#+END_SRC

[[id:a201358c-1eab-4a33-8b2b-ac27b26d1bcb][Refile]]When you log something as DONE, lot the time.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-log-done 'note))
#+end_src

* Refile
Targets include this file and any agenda file, up to 3 levels.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)
                               ("~/org/knowledge.org" :maxlevel . 2))))
#+END_SRC

However, targets with DONE state are EXCLUDED as refile targets.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-refile-target-verify-function
          (lambda ()
            (not (member (nth 2 (org-heading-components))
                         org-done-keywords)))))
#+END_SRC

Refile to top-level is ALLOWED.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-refile-use-outline-path 'file))
#+END_SRC

Allow refile to create parent tasks with confirmation

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-refile-allow-creating-parent-nodes 'confirm))
#+END_SRC

Save org buffers after a refile.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

** Refile Completion

We want to opt to use ivy for refile destination completion. After experiment this suits my current org structure really well.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'ivy-completing-read-handlers-alist
                 '(org-capture-refile . completing-read-default))
    (add-to-list 'ivy-completing-read-handlers-alist
                 '(org-refile . completing-read-default)))
#+end_src

* Markdown

Github Flavored Markdown exporter for org mode

#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :straight t
    :after org)
#+END_SRC

* Babel (Source code in org)

To make TAB work inside the source code blocks when the language is
determined (or specified).

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-src-tab-acts-natively t))
#+END_SRC

** Support Graphviz

#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages '((dot . t)))
#+end_src

* Org Capture

org-captured item by default goes to =buffers.org=.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-default-notes-file "~/org/buffers.org"))
#+END_SRC

=org-capture= templates for different sub types.

#+BEGIN_SRC emacs-lisp
  (defun bds/habit-default-schedule ()
    (format-time-string "SCHEDULED: <%Y-%m-%d %a +7d>"))

  (with-eval-after-load 'org
    (setq org-capture-templates
          '(("t" "todo" entry (file+headline "~/org/buffers.org" "Tasks")
             "* TODO %?\n")
            ("f" "favorite" entry (file+headline "~/org/buffers.org" "Favorite")
             "* %? :FAVORITE:\n%a\n")
            ("i" "idea" entry (file+headline "~/org/buffers.org" "Idea")
             "* %? :IDEA:\n")
            ("h" "habit" entry (file+headline "~/org/buffers.org" "Tasks")
             "* TODO %? :HABIT:\n%(bds/habit-default-schedule)\n:PROPERTIES:\n:STYLE: habit\n:END:\n"))))
#+END_SRC

* Habit

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-show-habits-only-for-today nil)
    (setq org-habit-graph-column 60))
#+END_SRC

* Archive

Provide a command (no key bindings) to archive all tasks that are
already done.

#+BEGIN_SRC emacs-lisp
  (defun bds/org-archive-all-done ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE/DELEGATED/CANCELLED" 'file))
#+END_SRC

* Slides

#+begin_src emacs-lisp
  (defun bds/on-org-presentation-begin ()
    (text-scale-adjust 2)
    (org-display-inline-images))

  (defun bds/on-org-presentation-end ()
    (text-scale-adjust 0))

  (use-package org-tree-slide
    :straight t
    :hook ((org-tree-slide-play . bds/on-org-presentation-begin)
           (org-tree-slide-stop . bds/on-org-presentation-end))
    :custom
    (org-image-actual-width nil)
    (org-tree-slide-activate-message "Presentation alive!")
    (org-tree-slide-activate-message "Presentation done!")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " // "))
#+end_src
