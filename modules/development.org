#+TITLE: Development Configuration for Emacs
#+STARTUP: showall

* Language Neutral Tooling and Utilities

** Git

Use magit for git. The customization on =magit-display-buffer-function= makes it prompts =magit-status= in the same windows instead of opening a new one.

#+begin_src emacs-lisp
  (use-package magit
    ;; Defer loading magit until magit-status is called
    :commands magit-status
    :straight t
    :bind (("C-x g" . magit-status))
    :custom (magit-display-buffer-function
             #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

*** Forge

This package [[https://magit.vc/manual/forge/][forge]] adds integration with Github and Gitlab etc.

*NOTE*: Make sure to configure a GitHub token before using this package!

1. https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
2. https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

#+begin_src emacs-lisp
  (use-package forge
    :straight t
    :after magit)
#+end_src

** Projectile

This is for project management. It provides utilities to go between different files in the project, and also provides scoping for certain commands. This means that when you run those commands, if they are scopped by projectile, they are only gonna look at files from the project directory.

This [[https://www.reddit.com/r/emacs/comments/azddce/what_workflows_do_you_have_with_projectile_and/][reddit post]] and [[https://www.reddit.com/r/emacs/comments/guzkwo/what_does_projectile_actually_do/][this]] are good readings.

Projectile has a very good [[https://docs.projectile.mx/][documentation]].

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'hydra
    (defhydra hydra-projectile (:color blue)
      "
      ^
      ^Projectile^        ^Buffers^           ^Find^              ^Search^
      ^──────────^────────^───────^───────────^────^──────────────^──────^────────────
      _q_ quit            _b_ list            _d_ directory       _r_ replace
      _i_ reset cache     _k_ kill all        _D_ root            _R_ regexp replace
      ^^                  _S_ save all        _f_ file            _s_ search
      ^^                  ^^                  _p_ project         ^^
      ^^                  ^^                  ^^                  ^^
      "
      ("q" nil)
      ("b" counsel-projectile-switch-to-buffer)
      ("d" counsel-projectile-find-dir)
      ("D" projectile-dired)
      ("f" counsel-projectile-find-file)
      ("i" projectile-invalidate-cache :color red)
      ("k" projectile-kill-buffers)
      ("p" counsel-projectile-switch-project)
      ("r" projectile-replace)
      ("R" projectile-replace-regexp)
      ("s" counsel-ag)
      ("S" projectile-save-project-buffers)))

  (use-package projectile
    :straight t
    :diminish project-tile-mode
    :config (projectile-mode)
    :bind (("C-c p" . 'hydra-projectile/body))
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :straight t
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Direnv

This makes Emacs respect =.envrc= file for direnv. I am mainly using =direnv= for automatically starting the =devShell= defined in =flake.nix=, and this makes it so that it brings in the commands enabled by the =devShell=.

#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :config (direnv-mode))
#+end_src

* Language Server Protocol (LSP)

Thanks to microsoft's great effrot invested in the language backend, we have [[https://microsoft.github.io/language-server-protocol/][LSP]]. I think it is mainly designed for VSCode but many other IDEs have optted in for it. This section configures the integration with LSP for Emacs.

** LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)  ;; Triggered loading only by those commands
    :init (setq lsp-keymap-prefix "C-c l"))
#+end_src

* JavaScript, TypeScript, HTML and CSS

Use =web-mode= for this with some customization.

1. By default =web-mode= does not associate typescript and javascript files. Add them to the =:mode= hook.
2. By default =web-mode= globally use indentation =4=. Replace that with =2= to write more compact source code.
3. Enable LSP with =lsp-deferred=. This is currently a *TODO*, because I haven't figure out how to install language server on a per-project basis (or maybe I should have install them globally or just inject to the emacs package).

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :mode (("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.svelte\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2))
  ;; TODO: make lsp work
  ;; :hook (web-mode . lsp-deferred)) 
#+end_src

* Nix

#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t)
#+end_src
