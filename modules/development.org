#+TITLE: Development Configuration for Emacs
#+STARTUP: showall

* Language Neutral Tooling and Utilities

** Git

Use magit for git. The customization on =magit-display-buffer-function= makes it prompts =magit-status= in the same windows instead of opening a new one.

#+begin_src emacs-lisp
  (use-package magit
    ;; Defer loading magit until magit-status is called
    :commands magit-status
    :straight t
    :defer t
    :bind (("C-x g" . magit-status))
    :custom (magit-display-buffer-function
             #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

*** Forge

This package [[https://magit.vc/manual/forge/][forge]] adds integration with Github and Gitlab etc.

*NOTE*: Make sure to configure a GitHub token before using this package!

1. https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
2. https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

#+begin_src emacs-lisp
  (use-package forge
    :straight t
    :defer t
    :after magit)
#+end_src

** Projectile

This is for project management. It provides utilities to go between different files in the project, and also provides scoping for certain commands. This means that when you run those commands, if they are scopped by projectile, they are only gonna look at files from the project directory.

This [[https://www.reddit.com/r/emacs/comments/azddce/what_workflows_do_you_have_with_projectile_and/][reddit post]] and [[https://www.reddit.com/r/emacs/comments/guzkwo/what_does_projectile_actually_do/][this]] are good readings.

Projectile has a very good [[https://docs.projectile.mx/][documentation]].

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'hydra
    (defhydra hydra-projectile (:color blue)
      "
      ^
      ^Projectile^        ^Buffers^           ^Find^              ^Search^
      ^──────────^────────^───────^───────────^────^──────────────^──────^────────────
      _q_ quit            _b_ list            _d_ directory       _r_ replace
      _i_ reset cache     _k_ kill all        _D_ root            _R_ regexp replace
      ^^                  _S_ save all        _f_ file            _s_ search
      ^^                  ^^                  _p_ project         ^^
      ^^                  ^^                  ^^                  ^^
      "
      ("q" nil)
      ("b" counsel-projectile-switch-to-buffer)
      ("d" counsel-projectile-find-dir)
      ("D" projectile-dired)
      ("f" counsel-projectile-find-file)
      ("i" projectile-invalidate-cache :color red)
      ("k" projectile-kill-buffers)
      ("p" counsel-projectile-switch-project)
      ("r" projectile-replace)
      ("R" projectile-replace-regexp)
      ("s" counsel-ag)
      ("S" projectile-save-project-buffers)))

  (use-package projectile
    :straight t
    :diminish project-tile-mode
    :defer t
    :config (projectile-mode)
    :bind (("C-c p" . 'hydra-projectile/body))
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :straight t
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Direnv

This makes Emacs respect =.envrc= file for direnv. I am mainly using =direnv= for automatically starting the =devShell= defined in =flake.nix=, and this makes it so that it brings in the commands enabled by the =devShell=.

#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :config (direnv-mode))
#+end_src

* Language Server Protocol (LSP)

Thanks to microsoft's great effrot invested in the language backend, we have [[https://microsoft.github.io/language-server-protocol/][LSP]]. I think it is mainly designed for VSCode but many other IDEs have optted in for it. This section configures the integration with LSP for Emacs.

** LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :defer t
    :commands (lsp lsp-deferred)  ;; Triggered loading only by those commands
    :init (setq lsp-keymap-prefix "C-c l"))
#+end_src

** Company Mode

Company is a text completion framework for Emacs. It does not have to work with LSP, but working with LSP can provide great experience.

We also add the package =company-box= just to make the prompts a little bit more appealing. This only affects the appearance but not the logic and functionality.

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :defer t
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 2) ;; Need to type at leasat 2 characters
    (company-idle-delay 0.0))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+end_src

* C/C++

Use the built-in =cc-mode=, together with =modern-cpp-font-lock= to support C++11, C++14, C++17 and C++20 syntax.

It also add the key bindings and support for =clang-format=.

#+begin_src emacs-lisp
  (defun clang-format-buffer-and-back-to-indentation ()
     "Call clang-format to format the whole buffer, and move the
     cursor to the first non-space character of the current line."
       (interactive)
       (clang-format-buffer)
       (back-to-indentation))

  (use-package clang-format :straight t :defer t)

  (use-package cc-mode
    :mode ("\\.h\\'" . c++-mode) ;; Otherwise it will be c-mode
    ;; Hijack the tab key to perform clang-format
    :bind (:map c++-mode-map
                ("<tab>" . clang-format-region)
                ("<C-M-tab>" . clang-format-buffer-and-back-to-indentation)))

  (use-package modern-cpp-font-lock
    :straight t
    :defer t
    :hook (c++-mode . modern-cpp-font-lock-mode))
#+end_src

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode
    :straight t
    :defer t
    :config (setq cmake-tab-width 4))
#+end_src

* JavaScript, TypeScript, HTML and CSS

Use =web-mode= for this with some customization.

1. By default =web-mode= does not associate typescript and javascript files. Add them to the =:mode= hook.
2. By default =web-mode= globally use indentation =4=. Replace that with =2= to write more compact source code.
3. Enable LSP with =lsp-deferred=. This is currently a *TODO*, because I haven't figure out how to install language server on a per-project basis (or maybe I should have install them globally or just inject to the emacs package).

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :defer t
    :mode (("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.svelte\\'" . web-mode))
    :custom
    (web-mode-markup-indent-offset 2 "Indent = 2 for html")
    (web-mode-css-indent-offset 2 "Indent = 2 for CSS")
    (web-mode-code-indent-offset 2 "Indent = 2 for JS/TS"))
  ;; TODO: make lsp work
  ;; :hook (web-mode . lsp-deferred))
#+end_src

* Nix

#+begin_src emacs-lisp
  (use-package nix-mode :straight t :defer t)
#+end_src

* Python

This configures the language server for python. Since for my setup the development environment is all in =flake.nix= so that both =python= and =python-language-server= will not be available until =direnv= kicks in. The current hack is to rely on [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Timers.html][timer]] to delay the initialization of =lsp-mode=, but maybe by applying the proper hook it does not have to be so.

#+begin_src emacs-lisp
    (defun bds/start-lsp-python-ms ()
      ;; The two variable bds/lsp-python-ms-exe and
      ;; bds/lsp-python-ms-python-exe are are to make sure that the python
      ;; and python language server executables are only found once.
      ;;
      ;; This means that the python lsp mode will only be bound to the
      ;; first python and python language server found in one session. I
      ;; personally think this is the most predictable and thus reasonable
      ;; behavior.
      (when (not bds/lsp-python-ms-exe)
        (setq bds/lsp-python-ms-exe (executable-find "python-language-server")))
      (when (not bds/lsp-python-ms-python-exe)
        (setq bds/lsp-python-ms-python-exe (executable-find "python")))

      (when (and bds/lsp-python-ms-python-exe
                 bds/lsp-python-ms-exe)
        (setq lsp-python-ms-executable bds/lsp-python-ms-exe)
        (setq lsp-python-ms-python-executable bds/lsp-python-ms-python-exe)
        (require 'lsp-python-ms)
        (lsp)))

    (defun bds/start-lsp-pyright ()
      ;; The two variable bds/lsp-python-ms-exe and
      ;; bds/lsp-python-ms-python-exe are are to make sure that the python
      ;; and python language server executables are only found once.
      ;;
      ;; This means that the pytnhon lsp mode will only be bound to the
      ;; first python and python language server found in one session. I
      ;; personally think this is the most predictable and thus reasonable
      ;; behavior.
        (require 'lsp-pyright)
        (lsp))


    (use-package lsp-pyright
      :straight t
      :init
      (defvar bds/lsp-python-ms-exe nil)
      (defvar bds/lsp-python-ms-python-exe nil)
      (setq lsp-python-ms-auto-install-server nil) ;; Let me manage it
      (setq lsp-pyright-stub-path
            (concat (getenv "HOME") ".local/share/pytypestubs/python-type-stubs"))
      :hook (python-mode . (lambda ()
                             ;; Wait for 2 seconds delay before lsp mode
                             ;; kicks in. This is to wait for the direnv
                             ;; to be activated which brings in the python
                             ;; and python language server.
                             (run-at-time "2 sec" nil #'bds/start-lsp-pyright))))
#+end_src

* Protocol Buffer

#+begin_src emacs-lisp
  (use-package protobuf-mode :straight t :defer t)
#+end_src

* Rust
#+begin_src emacs-lisp
  (use-package rust-mode :straight t :defer t)
#+end_src

* Common Lisp

#+begin_src emacs-lisp
  (use-package slime
    :straight t
    :defer t
    :config
    (setq inferior-lisp-program "quicklisp run")
    (slime-setup '(slime-fancy)))
#+end_src

* Ledger and Beancount

** Ledger

*TODO*: Add a hydra map for ledger mode.

#+begin_src emacs-lisp
  (use-package ledger-mode :straight t :defer t)
#+end_src

** Beancount

#+begin_src emacs-lisp
  (use-package beancount
    :straight (beancount-mode :type git :host github :repo "beancount/beancount-mode"
                              :branch "main")
    :defer t
    :init (add-to-list 'auto-mode-alist '("\\.beancount\\'" . beancount-mode))
    :custom
    (beancount-highlight-transaction-at-point t))
#+end_src

#+begin_src emacs-lisp
  (defun bds/beancount-chapter ()
    (interactive)
    ;; TODO Read this from a template file instead of something like this.
    (let ((this-date (format-time-string "%Y.%m.%d")))
      ;; Chapter Title
      (insert ";; +------------------------------------------------------------+\n")
      (insert (format ";; | %s Account Management                              |\n"
                      this-date))
      (insert ";; +------------------------------------------------------------+\n")
      (insert "\n\n")

      ;; Section Chase
      (insert (format ";; %s Chase\n" this-date))
      (insert (format ";; --------------------\n"))
      (insert "\n\n")

      ;; Section Chase
      (insert (format ";; %s Chase\n" this-date))
      (insert (format ";; --------------------\n"))
      (insert "\n\n")

      ;; Section Rental
      (insert (format ";; %s Rental \n" this-date))
      (insert (format ";; -------------------------\n"))
      (insert "pushtag #rental\n")
      (insert "\n\n")
      (insert "poptag #rental\n")
      (insert "\n\n")))
#+end_src

* Docker

The =dockerfile-mode= makes emacs recognize =Dockerfile= syntax
correctly.

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :defer t
    :init (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

* LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex :straight auctex :defer t)
#+END_SRC

* Graphviz (DOT)

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :straight t
    :defer t
    :custom (graphviz-dot-indent-width 4))
#+end_src

* XML

Default indentation is 2. Make it 4.

#+begin_src emacs-lisp
  (setq nxml-child-indent 4
        nxml-attribute-indent 4)
  (add-to-list 'auto-mode-alist '("\\.xml\\.tmpl\\'" . nxml-mode))
#+end_src

#+RESULTS:
: ((\.xml\.tmpl\' . nxml-mode) (\.gv\' . graphviz-dot-mode) (\.dot\' . graphviz-dot-mode) (\.hva\' . latex-mode) (Dockerfile\' . dockerfile-mode) (\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.beancount\' . beancount-mode) (\.ledger\' . ledger-mode) (\.rs\' . rust-mode) (\.proto\' . protobuf-mode) (\.nix\' . nix-mode) (\flake.lock\' . js-mode) (^/nix/store/.+\.drv\' . nix-drv-mode) (\.svelte\' . web-mode) (\.jsx\' . web-mode) (\.js\' . web-mode) (\.tsx\' . web-mode) (\.ts\' . web-mode) (\.cmake\' . cmake-mode) (CMakeLists\.txt\' . cmake-mode) (\.h\' . c++-mode) (\.envrc\' . direnv-envrc-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (/git-rebase-todo\' . git-rebase-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.drv\' . latex-mode))
